const hre = require("hardhat");
const fs = require("fs");
const path = require("path");
const readline = require('readline');

// ÂàõÂª∫ÂëΩ‰ª§Ë°åËæìÂÖ•Êé•Âè£
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// ÂÆâÂÖ®ËæìÂÖ•ÁßÅÈí•ÂáΩÊï∞ÔºàÈöêËóèËæìÂÖ•Ôºâ
function secureInput(prompt) {
  return new Promise((resolve) => {
    const stdin = process.stdin;
    const stdout = process.stdout;
    
    stdout.write(prompt);
    stdin.setRawMode(true);
    stdin.resume();
    stdin.setEncoding('utf8');
    
    let input = '';
    stdin.on('data', function(char) {
      char = char + '';
      
      switch (char) {
        case '\n':
        case '\r':
        case '\u0004': // Ctrl+D
          stdin.setRawMode(false);
          stdin.pause();
          stdout.write('\n');
          resolve(input);
          break;
        case '\u0003': // Ctrl+C
          stdout.write('\n');
          process.exit();
          break;
        case '\u007f': // Backspace
        case '\b':
          if (input.length > 0) {
            input = input.slice(0, -1);
            stdout.write('\b \b');
          }
          break;
        default:
          input += char;
          stdout.write('*'); // ÊòæÁ§∫ÊòüÂè∑ËÄå‰∏çÊòØÂÆûÈôÖÂ≠óÁ¨¶
          break;
      }
    });
  });
}

async function main() {
  console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤HelloWorldÂêàÁ∫¶Âà∞MonadÊµãËØïÁΩë...");
  
  // Ê£ÄÊµãÁΩëÁªú
  const network = hre.network.name;
  console.log(`üì° ÂΩìÂâçÁΩëÁªú: ${network}`);
  
  if (network !== "monad_testnet") {
    console.log("‚ö†Ô∏è  ËØ∑‰ΩøÁî®MonadÊµãËØïÁΩëËøõË°åÈÉ®ÁΩ≤");
    console.log("Ê≠£Á°ÆÂëΩ‰ª§: npm run deploy:testnet");
    process.exit(1);
  }

  let deployer;
  let privateKey;

  // Ê£ÄÊü•ÊòØÂê¶ÈÄöËøáÁéØÂ¢ÉÂèòÈáèÊèê‰æõ‰∫ÜÁßÅÈí•
  if (process.env.DEPLOY_PRIVATE_KEY && process.env.DEPLOY_PRIVATE_KEY !== "your_private_key_here") {
    console.log("üîë ‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáè‰∏≠ÁöÑÁßÅÈí•");
    privateKey = process.env.DEPLOY_PRIVATE_KEY;
  } else {
    // ÂëΩ‰ª§Ë°åËæìÂÖ•ÁßÅÈí•
    console.log("\nüîê ‰∏∫‰∫ÜÂÆâÂÖ®Ëµ∑ËßÅÔºåËØ∑ËæìÂÖ•ÊÇ®ÁöÑÁßÅÈí•ËøõË°åÈÉ®ÁΩ≤:");
    console.log("üí° ÊèêÁ§∫: ÁßÅÈí•ËæìÂÖ•Êó∂‰ºöÊòæÁ§∫‰∏∫ÊòüÂè∑ÔºåËæìÂÖ•ÂÆåÊàêÂêéÊåâÂõûËΩ¶");
    console.log("‚ö†Ô∏è  Ê≥®ÊÑè: ËØ∑Á°Æ‰øùÁßÅÈí•‰∏çÂåÖÂê´0xÂâçÁºÄ");
    
    privateKey = await secureInput("ËØ∑ËæìÂÖ•ÁßÅÈí•: ");
    
    if (!privateKey || privateKey.trim() === '') {
      console.log("‚ùå ÁßÅÈí•‰∏çËÉΩ‰∏∫Á©∫");
      process.exit(1);
    }
    
    // È™åËØÅÁßÅÈí•Ê†ºÂºè
    if (privateKey.startsWith('0x')) {
      console.log("‚ö†Ô∏è  Ê£ÄÊµãÂà∞0xÂâçÁºÄÔºåËá™Âä®ÁßªÈô§");
      privateKey = privateKey.slice(2);
    }
    
    if (privateKey.length !== 64) {
      console.log("‚ùå ÁßÅÈí•ÈïøÂ∫¶‰∏çÊ≠£Á°ÆÔºåÂ∫î‰∏∫64‰∏™Â≠óÁ¨¶");
      process.exit(1);
    }
  }

  try {
    // ‰ΩøÁî®ÁßÅÈí•ÂàõÂª∫Èí±ÂåÖ
    const wallet = new hre.ethers.Wallet(privateKey, hre.ethers.provider);
    deployer = wallet;
    
    console.log("üåê ‰ΩøÁî®MonadÊµãËØïÁΩëË¥¶Êà∑:", deployer.address);
    
    // Ëé∑Âèñ‰ΩôÈ¢ù
    const balance = await hre.ethers.provider.getBalance(deployer.address);
    console.log("üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù:", hre.ethers.formatEther(balance), "MON");
    
    if (balance === 0n) {
      console.log("‚ö†Ô∏è  Ë¥¶Êà∑‰ΩôÈ¢ù‰∏∫0ÔºåËØ∑ÂÖàËé∑ÂèñÊµãËØï‰ª£Â∏Å");
      console.log("üí° ÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÊñπÂºèËé∑ÂèñÊµãËØï‰ª£Â∏Å:");
      console.log("   - ËÆøÈóÆMonadÊµãËØïÁΩëÊ∞¥ÈæôÂ§¥");
      console.log("   - ËÅîÁ≥ªMonadÁ§æÂå∫Ëé∑ÂèñÊµãËØï‰ª£Â∏Å");
      console.log("   - Á°Æ‰øùË¥¶Êà∑Âú∞ÂùÄÊ≠£Á°Æ:", deployer.address);
      
      const continueAnyway = await new Promise((resolve) => {
        rl.question("ÊòØÂê¶ÁªßÁª≠ÈÉ®ÁΩ≤? (y/N): ", (answer) => {
          resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');
        });
      });
      
      if (!continueAnyway) {
        console.log("ÈÉ®ÁΩ≤Â∑≤ÂèñÊ∂à");
        process.exit(0);
      }
    }
  } catch (error) {
    console.error("‚ùå ÁßÅÈí•È™åËØÅÂ§±Ë¥•:", error.message);
    process.exit(1);
  }
  
  // ÈÉ®ÁΩ≤ÂêàÁ∫¶
  console.log("\nüìù ÈÉ®ÁΩ≤ÂêàÁ∫¶‰∏≠...");
  try {
    const HelloWorld = await hre.ethers.getContractFactory("HelloWorld", deployer);
    const helloWorld = await HelloWorld.deploy();
    
    await helloWorld.waitForDeployment();
    
    const contractAddress = await helloWorld.getAddress();
    console.log("‚úÖ HelloWorldÂêàÁ∫¶Â∑≤ÈÉ®ÁΩ≤Âà∞:", contractAddress);
    
    // ÊµãËØïÂêàÁ∫¶ÂäüËÉΩ
    console.log("\nüß™ ÊµãËØïÂêàÁ∫¶ÂäüËÉΩ...");
    const greeting = await helloWorld.getGreeting();
    console.log("üì¢ ÂàùÂßãÈóÆÂÄôËØ≠:", greeting);
    
    const callCount = await helloWorld.getCallCount();
    console.log("üî¢ Ë∞ÉÁî®Ê¨°Êï∞:", callCount.toString());
    
    // Ë∞ÉÁî®sayHelloÂáΩÊï∞
    console.log("üìû Ë∞ÉÁî®sayHelloÂáΩÊï∞...");
    const tx = await helloWorld.sayHello();
    await tx.wait();
    console.log("‚úÖ Ë∞ÉÁî®sayHelloÊàêÂäü!");
    
    const newCallCount = await helloWorld.getCallCount();
    console.log("üî¢ Êñ∞ÁöÑË∞ÉÁî®Ê¨°Êï∞:", newCallCount.toString());
    
    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØÂà∞Êñá‰ª∂
    const deploymentInfo = {
      network: "monad_testnet",
      chainId: 10143,
      contractAddress: contractAddress,
      deployer: deployer.address,
      deploymentTime: new Date().toISOString(),
      blockExplorer: `https://testnet.monadexplorer.com/address/${contractAddress}`
    };
    
    const deploymentPath = path.join(__dirname, "../deployments");
    if (!fs.existsSync(deploymentPath)) {
      fs.mkdirSync(deploymentPath, { recursive: true });
    }
    
    fs.writeFileSync(
      path.join(deploymentPath, "monad_testnet.json"),
      JSON.stringify(deploymentInfo, null, 2)
    );
    
    console.log("\nüéâ MonadÊµãËØïÁΩëÈÉ®ÁΩ≤ÂÆåÊàê!");
    console.log("üìã ÈÉ®ÁΩ≤‰ø°ÊÅØ:");
    console.log("   ÁΩëÁªú: MonadÊµãËØïÁΩë (Chain ID: 10143)");
    console.log("   ÂêàÁ∫¶Âú∞ÂùÄ:", contractAddress);
    console.log("   ÈÉ®ÁΩ≤ËÄÖ:", deployer.address);
    console.log("   Âå∫ÂùóÊµèËßàÂô®:", `https://testnet.monadexplorer.com/address/${contractAddress}`);
    
    console.log("\nüí° ‰∏ã‰∏ÄÊ≠•Êìç‰Ωú:");
    console.log("   1. ËøêË°å: npm run update-address");
    console.log("   2. Âú®MetaMask‰∏≠Ê∑ªÂä†MonadÊµãËØïÁΩë");
    console.log("   3. ÂêØÂä®ÂâçÁ´Ø: npm run dev");
    console.log("   4. Âú®ÂâçÁ´ØÁïåÈù¢ÂàáÊç¢Âà∞ÊµãËØïÁΩëÂπ∂ÊµãËØïÂäüËÉΩ");
    
    console.log("\nüìù MetaMaskÈÖçÁΩÆ‰ø°ÊÅØ:");
    console.log("   ÁΩëÁªúÂêçÁß∞: Monad Testnet");
    console.log("   RPC URL: https://testnet-rpc.monad.xyz/");
    console.log("   Chain ID: 10143");
    console.log("   Ë¥ßÂ∏ÅÁ¨¶Âè∑: MON");
    console.log("   Âå∫ÂùóÊµèËßàÂô®: https://testnet.monadexplorer.com/");
    
    console.log("\nüìÑ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞: deployments/monad_testnet.json");
    
  } catch (error) {
    console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error.message);
    if (error.message.includes("insufficient funds")) {
      console.log("üí° ËØ∑Á°Æ‰øùË¥¶Êà∑ÊúâË∂≥Â§üÁöÑMON‰ª£Â∏ÅÁî®‰∫éÈÉ®ÁΩ≤");
    }
    process.exit(1);
  } finally {
    rl.close();
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
    rl.close();
    process.exit(1);
  }); 